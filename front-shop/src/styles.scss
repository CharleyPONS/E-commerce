@import "~@angular/material/theming";
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$primary: (
  500: #598e5d,
  contrast: (
    50: $black-87-opacity,
    100: $black-87-opacity,
    200: $black-87-opacity,
    300: $black-87-opacity,
    400: $black-87-opacity,
    500: white,
    600: white,
    700: white,
    800: white,
    900: white,
    A100: $black-87-opacity,
    A200: $black-87-opacity,
    A400: $black-87-opacity,
    A700: $black-87-opacity,
  ),
);
$accent: (
  500: #88bf8a,
  contrast: (
    50: $black-87-opacity,
    100: $black-87-opacity,
    200: $black-87-opacity,
    300: $black-87-opacity,
    400: $black-87-opacity,
    500: white,
    600: white,
    700: white,
    800: white,
    900: white,
    A100: $black-87-opacity,
    A200: $black-87-opacity,
    A400: $black-87-opacity,
    A700: $black-87-opacity,
  ),
);
$warn: (
  500: #694f19,
  contrast: (
    50: $black-87-opacity,
    100: $black-87-opacity,
    200: $black-87-opacity,
    300: $black-87-opacity,
    400: $black-87-opacity,
    500: white,
    600: white,
    700: white,
    800: white,
    900: white,
    A100: $black-87-opacity,
    A200: $black-87-opacity,
    A400: $black-87-opacity,
    A700: $black-87-opacity,
  ),
);

$error: #ff8d79;
$shop-app-primary: mat-palette($primary);
$shop-app-accent: mat-palette($accent);

// The warn palette is optional (defaults to red).
$shop-app-warn: mat-palette($warn);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as `color` or `typography`.
$shop-app-theme: mat-light-theme(
  (
    color: (
      primary: $shop-app-primary,
      accent: $shop-app-accent,
      warn: $shop-app-warn,
    ),
  )
);

html,
body {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  font-size: 16px;
  overflow-x: hidden;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1.2em;
  font-family: Merriweather, serif !important;
}

p,
span,
div,
a {
  font-family: Merriweather, serif !important;
  font-size: 18px !important;
}
h1,
h2,
h3 {
  font-family: Montserrat, sans-serif !important;
  font-size: 31px !important;
  font-weight: 600 !important;
}

h3 {
  font-family: Montserrat, sans-serif !important;
  font-size: 21px !important;
  font-weight: 500 !important;
}

mat-error {
  color: #ff8d79 !important;
}

//p{
//  margin: 0!important;
//  padding: 0!important;
//}
* {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.shop-uppercase {
  text-transform: uppercase;
}
.shop-capitalize {
  text-transform: capitalize;
}
.shop-font-thin {
  font-weight: 300;
}
.shop-align-center {
  text-align: center !important;
}
.shop-align-right {
  text-align: right !important;
}
.shop-align-left {
  text-align: left !important;
}
.shop-bold {
  font-weight: bold;
}
.shop-cursor-pointer {
  cursor: pointer;
}
.shop-cursor-default {
  cursor: default;
}
.shop-margin-auto {
  margin-left: auto !important;
  margin-right: auto !important;
}
.shop-full-width {
  width: 100%;
}
.shop-full-height {
  min-height: 100%;
}
.shop-float-right {
  float: right;
}
.shop-no-border {
  border: none;
}
.shop-no-display {
  display: none !important;
}

// Here we set the global css for all the cart component to avoid any conflict with the library
.add-to-cart {
  .add-to-cart-button {
    background-color: #598e5d;
  }
}

.cart-summary {
  display: flex;
  margin-top: 2px;
  .cart-summary-icon {
    color: #88bf8a;
  }
  .cart-summary-contents {
    font-size: 16px;
  }
}
.cart-view {
  .cart-list-footer .cart-list-summary .cart-tax-summary {
    display: none !important;
  }
  .cart-list-footer .cart-list-summary .cart-shipping-summary {
    display: none !important;
  }
  .cart-list-footer .cart-list-summary .cart-total-summary {
    font-weight: 500 !important;
  }
}

.cart-view .cart-increase-button {
  margin-right: 6px;
  color: #598e5d;
  border-color: #598e5d;
  cursor: pointer;
}

.cart-view .cart-decrease-button {
  margin-left: 6px;
  color: #598e5d;
  border-color: #598e5d;
  cursor: pointer;
}

.cart-summary .cart-summary-icon img.summary-icon {
  display: none;
}

//  here we set global css style for snack bar

.success-dialog {
  color: white !important;
  .mat-simple-snackbar-action {
    color: #88bf8a !important;
  }
}

.error-dialog {
  color: white !important;
  .mat-simple-snackbar-action {
    color: $error !important;
  }
}

@for $i from 0 through 15 {
  .app-margin-lt-#{2 * $i} {
    margin-left: 2px * $i;
  }
  .app-margin-rt-#{2 * $i} {
    margin-right: 2px * $i;
  }
  .app-margin-tp-#{2 * $i} {
    margin-top: 2px * $i;
  }
  .app-margin-bt-#{2 * $i} {
    margin-bottom: 2px * $i;
  }
}

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($shop-app-theme);

//$shop-colors: (
//  'primary': map-get($shop-app-primary, 500)
//);
//
//@function get-color($key) {
//  @return map-get($shop-colors, $key);
//}
// To enable support for browsers that do not support @media queries,
// (IE <= 8, Firefox <= 3, Opera <= 9) set $mq-responsive to false
// Create a separate stylesheets served exclusively to these browsers,
// meaning @media queries will be rasterized, relying on the cascade itself
$mq-responsive: true;

// Name your breakpoints in a way that creates a ubiquitous language
// across team members. It will improve communication between
// stakeholders, designers, developers, and testers.
$mq-breakpoints: (
  mobile: 320px,
  tablet: 740px,
  desktop: 980px,
  wide: 1300px,
  // Tweakpoints
  desktopAd: 810px,
  mobileLandscape: 480px,
);

// Define the breakpoint from the $mq-breakpoints list that should
// be used as the target width when outputting a static stylesheets
// (i.e. when $mq-responsive is set to 'false').
$mq-static-breakpoint: desktop;

// If you want to display the currently active breakpoint in the top
// right corner of your site during development, add the breakpoints
// to this list, ordered by width, e.g. (mobile, tablet, desktop).
//$mq-show-breakpoints: (mobile, mobileLandscape, tablet, desktop, wide);
//$mq-show-breakpoints: (mobile, tablet, desktop, wide);

@import "../node_modules/sass-mq/mq";
